{"version":3,"sources":["Navbar.js","axios.js","Row.js","requests.js","Banner.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","useState","show","handleShow","useEffect","window","addEventListener","scrollY","removeEventListener","className","src","alt","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","a","get","request","console","log","data","results","fetchData","map","movie","poster_path","backdrop_path","name","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchCommedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","length","substr","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAkCeA,MA/Bf,WAAmB,IAAD,EACaC,oBAAS,GADtB,mBACPC,EADO,KACDC,EADC,KAcd,OAXAC,qBAAU,WAMN,OALAC,OAAOC,iBAAiB,UAAU,WAC1BD,OAAOE,QAAU,IACjBJ,GAAW,GACRA,GAAW,MAEf,WACHE,OAAOG,oBAAoB,aAEhC,IAGC,sBAAKC,UAAS,cAASP,GAAQ,cAA/B,UACI,qBACIO,UAAU,YACVC,IAAI,4EACJC,IAAI,iBAGR,qBACIF,UAAU,cACVC,IAAI,gFACJC,IAAI,qB,uCCtBLC,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iC,yBC4DEC,MAvDf,YAA+C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAAc,EACdlB,mBAAS,IADK,mBACnCmB,EADmC,KAC3BC,EAD2B,OAENpB,mBAAS,IAFH,mBAEnCqB,EAFmC,KAEvBC,EAFuB,KAmC1C,OA/BAnB,qBAAU,YACS,uCAAG,4BAAAoB,EAAA,sEACQX,EAAMY,IAAIP,GADlB,cACRQ,EADQ,OAEdC,QAAQC,IAAIF,EAAQG,KAAKC,SACzBT,EAAUK,EAAQG,KAAKC,SAHT,kBAIPJ,GAJO,2CAAH,qDAMfK,KACD,CAACb,IAwBA,sBAAKT,UAAU,MAAf,UACE,6BAAMQ,IAEN,qBAAKR,UAAU,eAAf,SACKW,EAAOY,KAAI,SAAAC,GAAK,OACf,qBACAxB,UAAS,sBAAiBU,GAAc,oBACxCT,IAAG,UA7CF,8BA6CE,OAAgBS,EAAa,aAAec,EAAMC,YAAc,uBAAyBD,EAAME,eAClGxB,IAAKsB,EAAMG,KAEXC,QAAS,kBAvBD,SAACJ,GACbX,EACAC,EAAc,IAEde,KAAkB,OAALL,QAAK,IAALA,OAAA,EAAAA,EAAOG,OAAQ,IAC3BG,MAAK,SAAAC,GACF,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDrB,EAAckB,EAAUhB,IAAI,SAC7BoB,OAAM,SAAAC,GAAK,OAAInB,QAAQC,IAAIkB,MAeXC,CAAYd,KADtBA,EAAMe,SAKjB1B,GAAc,cAAC,IAAD,CAAS2B,QAAS3B,EAAY4B,KApCrC,CACTC,OAAQ,MACRC,MAAO,OACPC,WAAY,CAERC,SAAU,UC3BhBC,EAAU,mCAaDC,EAXE,CACbC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,sBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,mBAAmB,2BAAD,OAA6BN,EAA7B,mBAClBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,qB,MCsCPU,MA3Cf,WAAmB,IAaGC,EAAKC,EAbT,EACYlE,mBAAS,IADrB,mBACPgC,EADO,KACAmC,EADA,KAiBd,OAdAhE,qBAAU,YACS,uCAAG,4BAAAoB,EAAA,sEACQX,EAAMY,IAAI+B,EAASE,uBAD3B,cACRhC,EADQ,OAEd0C,EACI1C,EAAQG,KAAKC,QAAQuC,KAAKC,MAAsB,GAAhBD,KAAKE,YAH3B,kBAIH7C,GAJG,2CAAH,qDAMfK,KACD,IAOC,yBAAQtB,UAAU,SACd+D,MAAO,CACHC,eAAgB,QAChBC,gBAAgB,kEAAD,cAC4BzC,QAD5B,IAC4BA,OAD5B,EAC4BA,EAAOE,cADnC,wBAGfwC,mBAAoB,iBAN5B,UASI,sBAAKlE,UAAU,mBAAf,UACI,oBAAIA,UAAU,gBAAd,UAAoC,OAALwB,QAAK,IAALA,OAAA,EAAAA,EAAOhB,SAAP,OAAgBgB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOG,QAAvB,OAA+BH,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAO2C,iBACrE,sBAAKnE,UAAU,kBAAf,UACI,wBAAQA,UAAU,iBAAlB,kBACA,wBAAQA,UAAU,iBAAlB,qBACA,oBAAIA,UAAU,sBAAd,UAnBEyD,EAoBO,OAACjC,QAAD,IAACA,OAAD,EAACA,EAAO4C,SApBVV,EAoBoB,KAnB7B,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKY,QAASX,EAAID,EAAIa,OAAO,EAAGZ,EAAI,GAAK,MAAQD,WAwBpD,qBAAKzD,UAAU,2BClBZuE,MAlBf,WACE,OACE,sBAAKvE,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAKQ,MAAM,oBAAoBC,SAAUsC,EAASE,sBAAuBvC,YAAU,IACnF,cAAC,EAAD,CAAKF,MAAM,eAAeC,SAAUsC,EAASC,gBAC7C,cAAC,EAAD,CAAKxC,MAAM,YAAYC,SAAUsC,EAASG,gBAC1C,cAAC,EAAD,CAAK1C,MAAM,gBAAgBC,SAAUsC,EAASI,oBAC9C,cAAC,EAAD,CAAK3C,MAAM,gBAAgBC,SAAUsC,EAASK,qBAC9C,cAAC,EAAD,CAAK5C,MAAM,gBAAgBC,SAAUsC,EAASM,oBAC9C,cAAC,EAAD,CAAK7C,MAAM,iBAAiBC,SAAUsC,EAASO,qBAC/C,cAAC,EAAD,CAAK9C,MAAM,gBAAgBC,SAAUsC,EAASQ,yBCPrCiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c28d7c7f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './Navbar.css'\n\nfunction Navbar() {\n    const [show, handleShow] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            } else handleShow(false);\n        });\n        return () => {\n            window.removeEventListener(\"scroll\");\n        }\n    }, [])    \n\n    return (\n        <div className={`nav ${show && \"nav__black\"}`}>\n            <img \n                className='nav__logo' \n                src='https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg'\n                alt='Netflix Logo'\n            />\n\n            <img \n                className='nav__avatar' \n                src='https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png'\n                alt='Netflix Logo'\n            />\n        </div>\n    )\n}\n\nexport default Navbar\n","import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3'\n})\n\nexport default instance;","import React, { useState, useEffect } from 'react'\nimport './Row.css'\nimport axios from './axios.js';\nimport YouTube from 'react-youtube'\nimport movieTrailer from 'movie-trailer'\n\nconst base_url = \"https://image.tmdb.org/t/p\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\"); \n    \n    useEffect(() => {\n        const fetchData = async () => {\n            const request = await axios.get(fetchUrl); \n            console.log(request.data.results);\n            setMovies(request.data.results)\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl])\n\n    const opts = {\n        height: \"390\", \n        width: \"100%\",\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay: 1\n        }\n    }    \n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl('');\n        } else {\n            movieTrailer(movie?.name || \"\")\n            .then(url => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get('v'));\n            }).catch(error => console.log(error))\n        }\n    }\n\n    return (\n        <div className='row'>\n          <h2>{ title }</h2>  \n\n          <div className='row__posters'>\n              {movies.map(movie => \n                <img \n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                src={`${base_url}${isLargeRow ? '/original/' + movie.poster_path : '/w250_and_h141_face/' + movie.backdrop_path}`} \n                alt={movie.name} \n                key={movie.id}\n                onClick={() => handleClick(movie)}\n                />\n              )}\n          </div>\n         {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} /> }\n        </div>\n    )\n}\n\nexport default Row\n","const API_KEY = \"c2165c6d125c3ef3f3ba4f875dccc446\"; \n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`, \n    fetchCommedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&witch_genres=99`\n}\n\nexport default requests;","import React, { useState, useEffect } from 'react'\nimport './Banner.css'\nimport axios from './axios'\nimport requests from './requests'\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const request = await axios.get(requests.fetchNetflixOriginals); \n            setMovie(\n                request.data.results[Math.floor(Math.random() * 11)]);\n                return request;\n        }\n        fetchData();\n    }, [])\n    \n    const truncate = (str, n) => {\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n    }\n\n    return (\n        <header className='banner'\n            style={{\n                backgroundSize: \"cover\",\n                backgroundImage: `url(\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n                )`,\n                backgroundPosition: \"center center\"\n            }} \n        >\n            <div className='banner__contents'>\n                <h1 className='banner__title'>{movie?.title || movie?.name || movie?.original_name}</h1> \n                <div className=\"banner__buttons\">\n                    <button className=\"banner__button\">Play</button>\n                    <button className=\"banner__button\">My List</button>\n                    <h1 className='banner__description'>\n                    {truncate(movie?.overview, 150)}    \n                    </h1>\n                </div>\n            </div>\n\n            <div className='banner--fadeBottom'></div>\n        </header>\n    )\n}\n\nexport default Banner\n","import React from 'react'\nimport './App.css'\nimport Navbar from './Navbar.js'\nimport Row from './Row'\nimport requests from './requests.js'\nimport Banner from './Banner.js'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar />\n      <Banner />\n      <Row title='NETFLIX ORIGINALS' fetchUrl={requests.fetchNetflixOriginals} isLargeRow/>\n      <Row title='Trending Now' fetchUrl={requests.fetchTrending} />\n      <Row title='Top Rated' fetchUrl={requests.fetchTopRated} />\n      <Row title='Action Movies' fetchUrl={requests.fetchActionMovies} />\n      <Row title='Comedy Movies' fetchUrl={requests.fetchCommedyMovies} />\n      <Row title='Horror Movies' fetchUrl={requests.fetchHorrorMovies} />\n      <Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies} />\n      <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  )\n\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}